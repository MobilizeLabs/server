<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd">

  <!--
        Controller definition for config reads.
   -->
  <!-- Basic HTTP Validation -->
  <bean id="userReadHttpServletRequestValidator" class="edu.ucla.cens.awserver.jee.servlet.validator.UserReadValidator"/>
  
  <!-- Create the AwRequest Object -->
  <bean id="userReadAwRequestCreator" class="edu.ucla.cens.awserver.jee.servlet.glue.UserReadAwRequestCreator" />
  
  <!-- Write the Response -->
  <bean id="userReadResponseWriter" class="edu.ucla.cens.awserver.jee.servlet.writer.UserReadResponseWriter">
    <constructor-arg>
      <bean class="edu.ucla.cens.awserver.domain.ErrorResponse">
        <property name="code" value="1306" />
        <property name="text" value="General user read error." />
      </bean> 
    </constructor-arg>
  </bean>

  <!-- Controller Definition -->
  <bean id="userReadController" class="edu.ucla.cens.awserver.controller.ControllerImpl">
    <constructor-arg>
      <!-- Services to validate and populate information. -->
      <list>
        <!-- Validate the user's token and populate the request. -->
        <ref bean="tokenBasedAuthenticationService" />
        
        <!-- Ensure that the user has the appropriate roles in the campaign. -->
        <ref bean="userRoleCampaignPopulationService" />
        <ref bean="userIsSupervisorInAllCampaignsInListOptionalService" />
        
        <!--  Ensure that the user has the appropriate roles in the class. -->
        <ref bean="userRoleClassPopulationService" />
        <ref bean="userIsPrivilegedInAllClassesInListOptionalService" />
        
        <!-- Get the information. -->
        <ref bean="userReadService" />
      </list>
    </constructor-arg>
    <constructor-arg>
      <!-- The annotator for when something fails after validation but before the writer. -->
      <ref bean="serverErrorRequestAnnotator" />
    </constructor-arg>
    <property name="validators">
      <!-- Validates the individual items in the request. -->
      <list>
        <!-- Validate that the user's token is a valid token. -->
        <ref bean="userTokenValidator" />
        
        <!-- Validate that the campaign URNs are valid URNs. -->
        <ref bean="campaignUrnListOptionalValidator" />
        
        <!-- Validate that the class URNs are valid URNs. -->
        <ref bean="classListOptionalValidator" />
      </list>
    </property>
    <property name="featureName">
      <value>user read</value>
    </property>
  </bean>
  
  <bean id="userReadService" class="edu.ucla.cens.awserver.service.UserReadService">
    <constructor-arg>
      <bean class="edu.ucla.cens.awserver.dao.UserReadDao">
        <constructor-arg>
          <ref bean="dataSource" />
        </constructor-arg>
      </bean>
    </constructor-arg>
  </bean>
</beans>