package org.ohmage.domain.campaign.response;

import java.io.File;
import java.util.UUID;

import org.ohmage.domain.campaign.PromptResponse;
import org.ohmage.domain.campaign.prompt.PhotoPrompt;

/**
 * A photo prompt response.
 * 
 * @author John Jenkins
 */
public class PhotoPromptResponse extends PromptResponse {
	private final UUID uuid;
	private File photo;

	/**
	 * Creates a photo prompt response.
	 * 
	 * @param prompt The HoursBeforeNowPrompt used to generate this response.
	 * 
	 * @param noResponse A 
	 * 					 {@link org.ohmage.domain.campaign.Response.NoResponse}
	 * 					 value if the user didn't supply an answer to this 
	 * 					 prompt.
	 * 
	 * @param repeatableSetIteration If the prompt was part of a repeatable 
	 * 								 set, this is the iteration of that 
	 * 								 repeatable set on which this response was
	 * 								 made.
	 * 
	 * @param uuid The UUID generated by the system as a unique identifier for
	 * 			   the photo.
	 * 
	 * @param photo A File object that points to the photo on disk.
	 * 
	 * @throws IllegalArgumentException Thrown if any of the parameters are 
	 * 									invalid or if 'validate' is "true" and
	 * 									the response value is invalid.
	 */
	public PhotoPromptResponse(
			final PhotoPrompt prompt, final NoResponse noResponse, 
			final Integer repeatableSetIteration, 
			final UUID uuid, final File photo) {
		
		super(prompt, noResponse, repeatableSetIteration);
		
		if((uuid == null) && (noResponse == null)) {
			throw new IllegalArgumentException("Both UUID and no response cannot be null.");
		}
		else if((uuid != null) && (noResponse != null)) {
			throw new IllegalArgumentException("Both UUID and no response were given.");
		}
		
		this.uuid = uuid;
		this.photo = photo;
	}
	
	/**
	 * Returns the UUID.
	 * 
	 * @return The UUID.
	 */
	public UUID getUuid() {
		return uuid;
	}
	
	/**
	 * Returns a File reference to the photo or null if none was given.
	 * 
	 * @return A File reference to the photo or null if none was given.
	 */
	public File getPhoto() {
		return photo;
	}
	
	/**
	 * Sets a pointer to the photo's file.
	 * 
	 * @param photo A pointer to the photo's file.
	 */
	public void setPhoto(final File photo) {
		this.photo = photo;
	}

	/**
	 * Returns the photo's UUID.
	 * 
	 * @return The photo's UUID.
	 */
	@Override
	public Object getResponseValue() {
		Object noResponseObject = super.getResponseValue();
		
		if(noResponseObject == null) {
			return uuid;
		}
		else {
			return noResponseObject;
		}
	}

	/**
	 * Generates a hash code for this response.
	 * 
	 * @return A hash code for this prompt response.
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((uuid == null) ? 0 : uuid.hashCode());
		return result;
	}

	/**
	 * Determines if this prompt response is logically equivalent to another
	 * object.
	 * 
	 * @param obj The other object.
	 * 
	 * @return True if this response is logically equivalent to the other 
	 * 		   object; false, otherwise.
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		PhotoPromptResponse other = (PhotoPromptResponse) obj;
		if (uuid == null) {
			if (other.uuid != null)
				return false;
		} else if (!uuid.equals(other.uuid))
			return false;
		return true;
	}
}